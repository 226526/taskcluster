version: 15
migrationScript: 0015-migration.sql
downgradeScript: 0015-downgrade.sql
methods:
  denylisted_notification_entities_load:
    description: See taskcluster-lib-entities
    mode: read
    serviceName: notify
    args: partition_key text, row_key text
    returns: table (partition_key_out text, row_key_out text, value jsonb, version integer, etag uuid)
    body: |-
      begin
        return query
        select
          denylisted_notification_entities_load.partition_key,
          denylisted_notification_entities_load.row_key,
          jsonb_build_object(
            'PartitionKey', denylisted_notification_entities_load.partition_key,
            'RowKey', denylisted_notification_entities_load.row_key,
            'notificationType', notification_type,
            'notificationAddress', notification_address) as value,
          1 as version,
          denylisted_notification.etag as etag
        from denylisted_notification
        where
          denylisted_notification.notification_type = decode_string_key(denylisted_notification_entities_load.partition_key) and denylisted_notification.notification_address = decode_string_key(denylisted_notification_entities_load.row_key);
      end
  denylisted_notification_entities_create:
    serviceName: notify
    description: See taskcluster-lib-entities
    mode: write
    args: pk text, rk text, properties jsonb, overwrite boolean, version integer
    returns: uuid
    body: |-
      declare
        new_row denylisted_notification%ROWTYPE;
      begin
        select
          (properties ->> 'notificationType')::text as notification_type,
          (properties ->> 'notificationAddress')::text as notification_address,
          public.gen_random_uuid() as etag
        into new_row;
        if overwrite then
          raise exception 'overwrite not implemented';
        else
          execute 'insert into denylisted_notification select $1.*' using new_row;
        end if;
        return new_row.etag;
      end
  denylisted_notification_entities_remove:
    serviceName: notify
    description: See taskcluster-lib-entities
    mode: write
    args: partition_key text, row_key text
    returns: table (etag uuid)
    body: |-
      begin
        return query delete from denylisted_notification
        where
          denylisted_notification.notification_type = decode_string_key(denylisted_notification_entities_remove.partition_key) and denylisted_notification.notification_address = decode_string_key(denylisted_notification_entities_remove.row_key);
        returning denylisted_notification.etag;
      end
  denylisted_notification_entities_scan:
    description: See taskcluster-lib-entities
    mode: read
    serviceName: notify
    args: pk text, rk text, condition text, size integer, page integer
    returns: table (partition_key text, row_key text, value jsonb, version integer, etag uuid)
    body: |-
      declare
        cond text[];
        exp_cond_operator text;
        exp_cond_operand timestamptz;
        partition_key_var text;
        row_key_var text;
      begin
        if not condition is null then
          raise exception 'no condition support in denylisted_notification_entities_scan';
        else
          return query select
            encode_string_key(denylisted_notification.notification_type) as partition_key,
            encode_string_key(denylisted_notification.notification_address) as row_key,
            jsonb_build_object(
              'PartitionKey', encode_string_key(denylisted_notification.notification_type),
              'RowKey', notification_address,
              'notificationType', notification_type,
              'notificationAddress', notification_address
            ) as value,
            1 as version,
            denylisted_notification.etag as etag from denylisted_notification
          where
            (denylisted_notification_entities_scan.pk is null or denylisted_notification.notification_type = decode_string_key(denylisted_notification_entities_scan.partition_key)) and
            (denylisted_notification_entities_scan.rk is null or denylisted_notification_entities_scan.rk = notification_address)
          order by denylisted_notification.notification_type, denylisted_notification.notification_address
          limit case
            when (size is not null and size > 0) then size + 1
            else null
          end
          offset case
            when (size is not null and size > 0 and page is not null and page > 0) then page
            else 0
          end;
        end if;
      end
